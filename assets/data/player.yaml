Villager:
  sprite:
    atlas: sprites
    index: 25
  components:
    cost: 2
    health: [2, 2]
    player:
    tags:
      - !Basic

Peasant:
  sprite:
    atlas: sprites
    index: 129
  components:
    cost: 2
    health: [1, 1]
    on_fight: "peasant_fight"
    player:
    tags:
      - !FoodProducer
  script: >
    pub fn peasant_fight(world, entity) {
      let position = world.get("position", entity).unwrap();
      let tile = world.get_tile_at(position).unwrap();
      match tile {
        Tile::Field => RuneCommand::ChangeFood(1),
        _ => RuneCommand::None
      }
    }
  description: >
    On fight start: gain +1 food, when on a field tile.

Hunter:
  sprite:
    atlas: sprites
    index: 77
  tier: 2
  components:
    cost: 3
    health: [1, 1]
    on_fight: "hunter_fight"
    player:
    tags:
      - !FoodProducer
  script: >
    pub fn hunter_fight(world, entity) {
      let position = world.get("position", entity).unwrap();
      let tile = world.get_tile_at(position).unwrap();
      match tile {
        Tile::Forest => RuneCommand::ChangeFood(2),
        _ => RuneCommand::None
      }
    }
  description: >
    On fight start: gain +2 food, when on a forest tile.

Merchant:
  sprite:
    atlas: sprites
    index: 78
  tier: 4
  components:
    cost: 3
    health: [2, 2]
    on_spawn: "merchant_spawn"
    player:
  script: >
    pub fn merchant_spawn(world, entity) {
      let commands  = [];
      for player in world.get_units_with_tag(Tag::FoodProducer) {
        commands.push(RuneCommand::ChangeHealth(player, 1));
      }
      commands
    }
  description: >
    On spawn: give +1 to all food producers.

Sheep:
  sprite:
    atlas: sprites
    index: 370
  components:
    cost: 2
    health: [1, 1]
    on_fight: "sheep_fight"
    player:
  script: >
    pub fn sheep_fight(world, entity) {
      let position = world.get("position", entity).unwrap();
      let tile = world.get_tile_at(position).unwrap();
      match tile {
        Tile::Meadow => RuneCommand::ChangeHealth(entity, 1),
        _ => RuneCommand::None
      }
    }
  description: >
    On fight start: gain +1 health, when on a meadow tile.

Shepherd:
  sprite:
    atlas: sprites
    index: 74
  tier: 3
  components:
    cost: 3
    health: [0, 0]
    on_spawn: "shepherd_spawn"
    player:
  script: >
    pub fn shepherd_spawn(world, entity) {
      let sum = 0;
      for player in world.query(["player", "position"], []) {
        if world.get("name", player) == Some("Sheep") {
          if let Some(health) = world.get("health", player) {
            sum += health.0;
          }
        }
      }
      RuneCommand::ChangeHealth(entity, sum)
    }
  description: >
    On spawn: gain health equal to the sum of all sheep health.

Ranger:
  sprite:
    atlas: sprites
    index: 471
  tier: 2
  components:
    cost: 3
    health: [2, 2]
    on_fight: "ranger_fight"
    player:
  script: >
    pub fn ranger_fight(world, entity) {
      let position = world.get("position", entity).unwrap();
      let tile = world.get_tile_at(position).unwrap();
      match tile {
        Tile::Forest => RuneCommand::ChangeHealth(entity, 1),
        _ => RuneCommand::None
      }
    }
  description: >
    On fight start: gain +1 health, when on a forest tile.

Herbalist:
  sprite:
    atlas: sprites
    index: 79
  tier: 2
  components:
    cost: 3
    health: [2, 2]
    on_fight: "healer_fight"
    player:
  script: >
    pub fn healer_fight(world, entity) {
      let position = world.get("position", entity).unwrap();
      let tile = world.get_tile_at(position).unwrap();
      if tile != Tile::Meadow { return }

      let commands  = [];
      for player in world.get_adjacent_units(entity) {
        commands.push(RuneCommand::ChangeHealth(player, 1));
      }
      commands
    }
  description: >
    On fight start: give +1 to adjacent units, if on a meadow tile.

Druid:
  sprite:
    atlas: sprites
    index: 122
  tier: 4
  components:
    cost: 3
    health: [2, 2]
    on_fight: "druid_fight"
    player:
  script: >
    pub fn druid_fight(world, entity) {
      let sum = 0;
      for player in world.query(["player", "position"], []) {

        let position = world.get("position", player).unwrap();
        let tile = world.get_tile_at(position).unwrap();

        if tile == Tile::Forest { sum += 1; }
      }
      RuneCommand::ChangeHealth(entity, sum)
    }
  description: >
    On fight start: gain +1 for each unit on a forest tile.


Pikeman:
  sprite:
    atlas: sprites
    index: 26
  components:
    cost: 3
    health: [3, 3]
    player:
    tags:
      - !Basic

Martyr:
  sprite:
    atlas: sprites
    index: 24
  tier: 3
  components:
    cost: 3
    health: [2, 2]
    on_kill: "martyr_kill"
    player:
  script: >
    pub fn martyr_kill(world, entity) {
      let commands  = [];
      for player in world.get_adjacent_units(entity) {
        commands.push(RuneCommand::ChangeHealth(player, 1));
      }
      commands
    }
  description: >
    On kill: increase adjacent units' health by 1.

Santo Subito:
  sprite:
    atlas: sprites
    index: 220
  tier: 5
  components:
    cost: 4
    health: [3, 3]
    on_kill: "santo_subito_kill"
    player:
  script: >
    pub fn santo_subito_kill(world, entity) {
      let commands  = [];
      for player in world.query(["player", "position"], []) {
        commands.push(RuneCommand::ChangeHealth(player, 1));
      }
      commands
    }
  description: >
    On kill: increase health of each player's unit by 1.
