# Basic

Villager:
  sprite:
    atlas: units
    tag: Villager
  components:
    cost: 2
    health: [2, 2]
    player:
    tags:
      - !Basic

Pikeman:
  sprite:
    atlas: units
    tag: Pikeman
  components:
    cost: 2
    health: [3, 3]
    player:
    tags:
      - !Basic

Scarecrow:
  sprite:
    atlas: units
    tag: Scarecrow
  components:
    cost: 1
    health: [1, 1]
    player:
    tags:
      - !Basic

Knight:
  sprite:
    atlas: units
    tag: Knight
  tier: 5
  components:
    cost: 3
    health: [4, 4]
    player:
    tags:
      - !Basic # Basic bonus


Wanderer:
  sprite:
    atlas: units
    tag: Wanderer
  tier: 1
  components:
    cost: 2
    health: [1, 1]
    on_spawn: "wanderer_spawn"
    player:
  script: >
    pub fn wanderer_spawn(world, entity, _) {
      let commands  = [];
      for player in world.get_players_with_tag(Tag::Basic) {
        commands.push(RuneCommand::ChangeHealth(player, 1));
      }
      commands
    }
  description: >
    On spawn: give +1 health to all basic units.

Chieftain:
  sprite:
    atlas: units
    tag: Chieftain
  tier: 4
  components:
    cost: 2
    health: [2, 2]
    on_fight: "chieftain_fight"
    player:
  script: >
    pub fn chieftain_fight(world, entity, _) {
      let commands  = [];
      for player in world.get_players_with_tag(Tag::Basic) {
        commands.push(RuneCommand::ChangeHealth(player, 1));
      }
      commands
    }
  description: >
    On fight: give +1 health to all basic units.

# Field units

Peasant:
  sprite:
    atlas: units
    tag: Peasant
  components:
    cost: 2
    health: [1, 1]
    on_fight: "peasant_fight"
    player:
    tags:
      - !FoodProducer
  script: >
    pub fn peasant_fight(world, entity, _) {
      let position = world.get("position", entity).unwrap();
      let tile = world.get_tile_at(position).unwrap();
      match tile {
        Tile::Field => RuneCommand::ChangeFood(1, Some(entity)),
        _ => RuneCommand::None
      }
    }
  description: >
    On fight start: gain +1 food, if on a field tile.

# Meadow units

Herbalist:
  sprite:
    atlas: units
    tag: Herbalist
  tier: 2
  components:
    cost: 2
    health: [2, 2]
    on_fight: "healer_fight"
    player:
  script: >
    pub fn healer_fight(world, entity, _) {
      let position = world.get("position", entity).unwrap();
      let tile = world.get_tile_at(position).unwrap();
      if tile != Tile::Meadow { return }

      let commands  = [];
      for player in world.get_adjacent_players(entity) {
        commands.push(RuneCommand::ChangeHealth(player, 1));
      }
      commands
    }
  description: >
    On fight start: give +1 health to adjacent units, if on a meadow tile.

Sheep:
  sprite:
    atlas: units
    tag: Sheep
  components:
    cost: 2
    health: [1, 1]
    on_fight: "sheep_fight"
    player:
  script: >
    pub fn sheep_fight(world, entity, _) {
      let position = world.get("position", entity).unwrap();
      let tile = world.get_tile_at(position).unwrap();
      match tile {
        Tile::Meadow => RuneCommand::ChangeHealth(entity, 1),
        _ => RuneCommand::None
      }
    }
  description: >
    On fight start: gain +1 health, if on a meadow tile.

# Forest units

Hunter:
  sprite:
    atlas: units
    tag: Hunter
  tier: 3
  components:
    cost: 2
    health: [2, 2]
    on_fight: "hunter_fight"
    player:
    tags:
      - !FoodProducer
  script: >
    pub fn hunter_fight(world, entity, _) {
      let position = world.get("position", entity).unwrap();
      let tile = world.get_tile_at(position).unwrap();
      match tile {
        Tile::Forest => RuneCommand::ChangeFood(2, Some(entity)),
        _ => RuneCommand::None
      }
    }
  description: >
    On fight start: gain +2 food, if on a forest tile.

Ranger:
  sprite:
    atlas: units
    tag: Ranger
  tier: 2
  components:
    cost: 2
    health: [2, 2]
    on_fight: "ranger_fight"
    player:
  script: >
    pub fn ranger_fight(world, entity, _) {
      let position = world.get("position", entity).unwrap();
      let tile = world.get_tile_at(position).unwrap();
      match tile {
        Tile::Forest => RuneCommand::ChangeHealth(entity, 1),
        _ => RuneCommand::None
      }
    }
  description: >
    On fight start: gain +1 health, when on a forest tile.

Druid:
  sprite:
    atlas: units
    tag: Druid
  tier: 4
  components:
    cost: 2
    health: [2, 2]
    on_fight: "druid_fight"
    player:
  script: >
    pub fn druid_fight(world, entity, _) {
      let sum = 0;
      for player in world.query(["player", "position"], []) {

        let position = world.get("position", player).unwrap();
        let tile = world.get_tile_at(position).unwrap();

        if tile == Tile::Forest { sum += 1; }
      }
      RuneCommand::ChangeHealth(entity, sum)
    }
  description: >
    On fight start: gain +1 health for each unit on a forest tile.

# Food bonus units

Merchant:
  sprite:
    atlas: units
    tag: Merchant
  tier: 4
  components:
    cost: 3
    health: [2, 2]
    on_spawn: "merchant_spawn"
    player:
  script: >
    pub fn merchant_spawn(world, entity, _) {
      let commands  = [];
      for player in world.get_players_with_tag(Tag::FoodProducer) {
        commands.push(RuneCommand::ChangeHealth(player, 1));
      }
      commands
    }
  description: >
    On spawn: give +1 health to all food producers.

Beggar:
  sprite:
    atlas: units
    tag: Beggar
  tier: 3
  components:
    cost: 2
    health: [2, 2]
    on_ally_gain_food: "beggar_ally_gain_food"
    player:
    trigger_limit: [3, 3]
  script: >
    pub fn beggar_ally_gain_food(world, entity, cmd) {
      if let RuneCommand::ChangeFood(val, Some(other)) = cmd {
        if world.is_adjacent(entity, other) {
          return RuneCommand::ChangeHealth(entity, val);
        }
      }
    }
  description: >
    When an adjacent ally yields food, gain the same amount of health.

Thief:
  sprite:
    atlas: units
    tag: Thief
  tier: 4
  components:
    cost: 2
    health: [2, 2]
    on_fight: "thief_fight"
    player:
  script: >
    pub fn thief_fight(world, entity, _) {
      let food = world.get_current_food();
      let val = food;

      return [
        RuneCommand::ChangeFood(-val, Some(entity.clone())),
        RuneCommand::ChangeHealth(entity, val)
      ];

    }
  description: >
    On fight start: take all player's food and gain that much health.

Alchemist:
  sprite:
    atlas: units
    tag: Alchemist
  tier: 5
  components:
    cost: 2
    health: [2, 2]
    on_fight: "alchemist_fight"
    player:
  script: >
    pub fn alchemist_fight(world, entity, _) {
      let food = world.get_current_food();
      let val = (0.5 * food as f64).ceil() as i64;

      return [
        RuneCommand::ChangeFood(val, Some(entity.clone())),
        RuneCommand::ChangeHealth(entity, -2)
      ];

    }
  description: >
    On fight start: increase player's food by 50%. Take two damage.

Shopkeeper:
  sprite:
    atlas: units
    tag: Shopkeeper
  tier: 5
  components:
    cost: 2
    health: [2, 2]
    on_ally_gain_food: "shopkeeper_ally_gain_food"
    player:
    trigger_limit: [3, 3]
  script: >
    pub fn shopkeeper_ally_gain_food(world, entity, cmd) {
      if let RuneCommand::ChangeFood(val, Some(other)) = cmd {
        return RuneCommand::ChangeFood(val, Some(entity));
      }
    }
  description: >
    When an ally yields food, yield the same amount as well.

Taxman:
  sprite:
    atlas: units
    tag: Taxman
  tier: 3
  components:
    cost: 0
    health: [2, 2]
    on_fight: "taxman_fight"
    player:
  script: >
    pub fn taxman_fight(world, entity, _) {
      let food = world.get_current_food();
      if food >= 2 {
        RuneCommand::ChangeFood(-2, Some(entity))
      } else {
        RuneCommand::Kill(entity)
      }
    }
  description: >
    On fight start: takes 2 food to survive.

# Death bonus units

Martyr:
  sprite:
    atlas: units
    tag: Martyr
  tier: 3
  components:
    cost: 2
    health: [2, 2]
    on_kill: "martyr_kill"
    player:
  script: >
    pub fn martyr_kill(world, entity, _) {
      let commands  = [];
      for player in world.get_adjacent_players(entity) {
        commands.push(RuneCommand::ChangeHealth(player, 1));
      }
      commands
    }
  description: >
    On kill: increase adjacent units' health by 1.

Santo Subito:
  sprite:
    atlas: units
    tag: Santo Subito
  tier: 5
  components:
    cost: 3
    health: [2, 2]
    on_kill: "santo_subito_kill"
    player:
  script: >
    pub fn santo_subito_kill(world, entity, _) {
      let commands  = [];
      for player in world.query(["player", "position"], []) {
        commands.push(RuneCommand::ChangeHealth(player, 1));
      }
      commands
    }
  description: >
    On kill: increase the health of each player's unit by 1.

Mime:
  sprite:
    atlas: units
    tag: Mime
  tier: 3
  components:
    cost: 2
    health: [1, 1]
    on_ally_kill: "mime_ally_kill"
    player:
  script: >
    pub fn mime_ally_kill(world, entity, cmd) {
      if let RuneCommand::Kill(other) = cmd {
        if world.is_in_front(entity, other) {
          let position = world.get("position", entity).unwrap();
          return [
            RuneCommand::RemoveUnit(entity),
            RuneCommand::RespawnPlayer(other, position)
          ];
        }
      }
    }
  description: >
    When an ally in front is killed, respawn it in place of self.

Vampire:
  sprite:
    atlas: units
    tag: Vampire
  tier: 4
  components:
    cost: 2
    health: [2, 2]
    on_fight: "vampire_fight"
    player:
  script: >
    pub fn vampire_fight(world, entity, _) {
      if let Some(other) = world.get_player_in_front(entity) {
        if let Some(health) = world.get("health", other) {
          let val = health.0;
          return [
            RuneCommand::ChangeHealth(other, -val),
            RuneCommand::ChangeHealth(entity, val),
          ];
        }
      }
    }
  description: >
    On fight start: drain ally's in front health.

Necromancer:
  sprite:
    atlas: units
    tag: Necromancer
  tier: 5
  components:
    cost: 2
    health: [2, 2]
    on_ally_kill: "necromancer_ally_kill"
    player:
    trigger_limit: [1, 1]
  script: >
    pub fn necromancer_ally_kill(world, entity, cmd) {
      if let RuneCommand::Kill(other) = cmd {
        let position = world.get("position", other).unwrap();
        return RuneCommand::RespawnPlayer(other, position);
      }
    }
  description: >
    When an ally is killed, respawn it.

# Heal

Bard:
  sprite:
    atlas: units
    tag: Bard
  tier: 3
  components:
    cost: 2
    health: [2, 2]
    on_ally_heal: "bard_ally_heal"
    player:
    trigger_limit: [3, 3]
  script: >
    pub fn bard_ally_heal(world, entity, cmd) {
      if let RuneCommand::ChangeHealth(other, val) = cmd {
        if world.is_adjacent(entity, other) {
          return RuneCommand::ChangeHealth(entity, val);
        }
      }
    }
  description: >
    When an adjacent ally gains health, gain the same amount.

Apothecary:
  sprite:
    atlas: units
    tag: Apothecary
  tier: 3
  components:
    cost: 2
    health: [2, 2]
    on_damage: "apothecary_damage"
    player:
    trigger_limit: [3, 3]
  script: >
    pub fn apothecary_damage(world, entity, _) {
      let commands  = [];
      for player in world.get_adjacent_players(entity) {
        commands.push(RuneCommand::ChangeHealth(player, 1));
      }
      commands
    }
  description: >
    On damage: give +1 health to adjacent allies.

# Other

Clay Statue:
  sprite:
    atlas: units
    tag: Clay Statue
  tier: 4
  components:
    cost: 2
    health: [6, 6]
    on_damage: "clay_statue_damage"
    player:
  script: >
    pub fn clay_statue_damage(world, entity, _) {
      RuneCommand::Kill(entity)
    }
  description: >
    Breaks when damaged.

Stone Statue:
  sprite:
    atlas: units
    tag: Stone Statue
  tier: 4
  components:
    cost: 2
    health: [5, 5]
    player:
    tags:
      - !Heavy
