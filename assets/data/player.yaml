# Basic
 
Villager:
  sprite:
    atlas: units
    tag: Villager
  components:
    cost: 2
    health: [2, 2]
    player:
    tags:
      - !Basic

Pikeman:
  sprite:
    atlas: units
    tag: Pikeman
  components:
    cost: 3
    health: [3, 3]
    player:
    tags:
      - !Basic

# Field units

Peasant:
  sprite:
    atlas: units
    tag: Peasant
  components:
    cost: 2
    health: [1, 1]
    on_fight: "peasant_fight"
    player:
    tags:
      - !FoodProducer
  script: >
    pub fn peasant_fight(world, entity, _) {
      let position = world.get("position", entity).unwrap();
      let tile = world.get_tile_at(position).unwrap();
      match tile {
        Tile::Field => RuneCommand::ChangeFood(1),
        _ => RuneCommand::None
      }
    }
  description: >
    On fight start: gain +1 food, when on a field tile.


# Meadow units

Herbalist:
  sprite:
    atlas: units
    tag: Herbalist
  tier: 2
  components:
    cost: 3
    health: [2, 2]
    on_fight: "healer_fight"
    player:
  script: >
    pub fn healer_fight(world, entity, _) {
      let position = world.get("position", entity).unwrap();
      let tile = world.get_tile_at(position).unwrap();
      if tile != Tile::Meadow { return }

      let commands  = [];
      for player in world.get_adjacent_units(entity) {
        commands.push(RuneCommand::ChangeHealth(player, 1));
      }
      commands
    }
  description: >
    On fight start: give +1 to adjacent units, if on a meadow tile.

Sheep:
  sprite:
    atlas: units
    tag: Sheep
  components:
    cost: 2
    health: [1, 1]
    on_fight: "sheep_fight"
    player:
  script: >
    pub fn sheep_fight(world, entity, _) {
      let position = world.get("position", entity).unwrap();
      let tile = world.get_tile_at(position).unwrap();
      match tile {
        Tile::Meadow => RuneCommand::ChangeHealth(entity, 1),
        _ => RuneCommand::None
      }
    }
  description: >
    On fight start: gain +1 health, when on a meadow tile.

# Shepherd:
#   sprite:
#     atlas: sprites
#     tag: Shepherd
#   tier: 3
#   components:
#     cost: 3
#     health: [0, 0]
#     on_spawn: "shepherd_spawn"
#     player:
#   script: >
#     pub fn shepherd_spawn(world, entity, _) {
#       let sum = 0;
#       for player in world.query(["player", "position"], []) {
#         if world.get("name", player) == Some("Sheep") {
#           if let Some(health) = world.get("health", player) {
#             sum += health.0;
#           }
#         }
#       }
#       RuneCommand::ChangeHealth(entity, sum)
#     }
#   description: >
#     On spawn: gain health equal to the sum of all sheep health.

# Forest units

Hunter:
  sprite:
    atlas: units
    tag: Hunter
  tier: 2
  components:
    cost: 3
    health: [1, 1]
    on_fight: "hunter_fight"
    player:
    tags:
      - !FoodProducer
  script: >
    pub fn hunter_fight(world, entity, _) {
      let position = world.get("position", entity).unwrap();
      let tile = world.get_tile_at(position).unwrap();
      match tile {
        Tile::Forest => RuneCommand::ChangeFood(2),
        _ => RuneCommand::None
      }
    }
  description: >
    On fight start: gain +2 food, when on a forest tile.

Ranger:
  sprite:
    atlas: units
    tag: Ranger
  tier: 2
  components:
    cost: 3
    health: [2, 2]
    on_fight: "ranger_fight"
    player:
  script: >
    pub fn ranger_fight(world, entity, _) {
      let position = world.get("position", entity).unwrap();
      let tile = world.get_tile_at(position).unwrap();
      match tile {
        Tile::Forest => RuneCommand::ChangeHealth(entity, 1),
        _ => RuneCommand::None
      }
    }
  description: >
    On fight start: gain +1 health, when on a forest tile.


Druid:
  sprite:
    atlas: units
    tag: Druid
  tier: 4
  components:
    cost: 3
    health: [2, 2]
    on_fight: "druid_fight"
    player:
  script: >
    pub fn druid_fight(world, entity, _) {
      let sum = 0;
      for player in world.query(["player", "position"], []) {

        let position = world.get("position", player).unwrap();
        let tile = world.get_tile_at(position).unwrap();

        if tile == Tile::Forest { sum += 1; }
      }
      RuneCommand::ChangeHealth(entity, sum)
    }
  description: >
    On fight start: gain +1 for each unit on a forest tile.

# Food bonus units

Merchant:
  sprite:
    atlas: units
    tag: Merchant
  tier: 4
  components:
    cost: 3
    health: [2, 2]
    on_spawn: "merchant_spawn"
    player:
  script: >
    pub fn merchant_spawn(world, entity, _) {
      let commands  = [];
      for player in world.get_units_with_tag(Tag::FoodProducer) {
        commands.push(RuneCommand::ChangeHealth(player, 1));
      }
      commands
    }
  description: >
    On spawn: give +1 to all food producers.

# Health bonus units

Martyr:
  sprite:
    atlas: units
    tag: Martyr
  tier: 3
  components:
    cost: 3
    health: [2, 2]
    on_kill: "martyr_kill"
    player:
  script: >
    pub fn martyr_kill(world, entity, _) {
      let commands  = [];
      for player in world.get_adjacent_units(entity) {
        commands.push(RuneCommand::ChangeHealth(player, 1));
      }
      commands
    }
  description: >
    On kill: increase adjacent units' health by 1.

Santo Subito:
  sprite:
    atlas: units
    tag: Santo Subito
  tier: 5
  components:
    cost: 4
    health: [3, 3]
    on_kill: "santo_subito_kill"
    player:
  script: >
    pub fn santo_subito_kill(world, entity, _) {
      let commands  = [];
      for player in world.query(["player", "position"], []) {
        commands.push(RuneCommand::ChangeHealth(player, 1));
      }
      commands
    }
  description: >
    On kill: increase health of each player's unit by 1.

Bard:
  sprite:
    atlas: units
    tag: Bard
  tier: 3
  components:
    cost: 3
    health: [2, 2]
    on_ally_heal: "bard_ally_heal"
    player:
    trigger_limit: [3, 3]
  script: >
    pub fn bard_ally_heal(world, entity, cmd) {
      if let RuneCommand::ChangeHealth(other, val) = cmd {
        if world.is_adjacent(entity, other) {
          return RuneCommand::ChangeHealth(entity, val);
        }
      }
    }
  description: >
    When adjacent ally gains health, gain the same amount.

# Other

Clay Statue:
  sprite:
    atlas: units
    tag: Clay Statue
  tier: 4
  components:
    cost: 3
    health: [6, 6]
    on_damage: "clay_statue_damage"
    player:
  script: >
    pub fn clay_statue_damage(world, entity, _) {
      RuneCommand::Kill(entity)
    }
  description: >
    Breaks when damaged.

Mime:
  sprite:
    atlas: units
    tag: Mime
  tier: 3
  components:
    cost: 3
    health: [1, 1]
    on_ally_kill: "mime_ally_kill"
    player:
  script: >
    pub fn mime_ally_kill(world, entity, cmd) {
      if let RuneCommand::Kill(other) = cmd {
        if world.is_in_front(entity, other) {
          let position = world.get("position", entity).unwrap();
          return [
            RuneCommand::RemoveUnit(entity),
            RuneCommand::RespawnPlayer(other, position)
          ];
        }
      }
    }
  description: >
    When an ally in front is killed, respawn it in place of self.

